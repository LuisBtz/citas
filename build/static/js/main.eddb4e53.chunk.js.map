{"version":3,"sources":["components/Formulario.js","components/Cita.js","App.js","reportWebVitals.js","index.js"],"names":["Formulario","crearCita","useState","mascota","propietario","hora","sintomas","cita","actualizarCita","error","actualizarError","actualizarState","e","target","name","value","fecha","className","onSubmit","preventDefault","trim","id","uuid","type","placeholder","onChange","Cita","eliminarCita","onClick","App","citasIniciales","JSON","parse","localStorage","getItem","citas","guardarCitas","useEffect","setItem","stringify","nuevasCitas","filter","titulo","length","map","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.eddb4e53.chunk.js","sourcesContent":["import React, { Fragment, useState } from 'react';\nimport uuid from 'uuid/v4';\nimport PropTypes from 'prop-types';\n\nconst Formulario = ({ crearCita }) => {\n  // Crear State de Citas\n  const [cita, actualizarCita] = useState({\n    mascota: '',\n    propietario: '',\n    hora: '',\n    sintomas: '',\n  });\n\n  const [error, actualizarError] = useState(false);\n\n  //   Funci´øn que se ejecuta cada que el usuario escribe en un input\n  const actualizarState = (e) => {\n    actualizarCita({\n      ...cita,\n      [e.target.name]: e.target.value,\n    });\n  };\n\n  //   Extraer Valores\n  const { mascota, propietario, fecha, hora, sintomas } = cita;\n\n  //   Cuando el usuario presiona agregar cita\n\n  const submitCita = (e) => {\n    e.preventDefault();\n\n    // Validar\n    if (\n      mascota.trim() === '' ||\n      propietario.trim() === '' ||\n      fecha.trim() === '' ||\n      hora.trim() === '' ||\n      sintomas.trim() === ''\n    ) {\n      actualizarError(true);\n      return;\n    }\n    // Eliminar el mensaje previo\n    actualizarError(false);\n\n    // Asignar un ID\n    cita.id = uuid();\n\n    // Crear cita\n    crearCita(cita);\n\n    // Reiniciar el form\n    actualizarCita({\n      mascota: '',\n      propietario: '',\n      hora: '',\n      sintomas: '',\n    });\n  };\n\n  return (\n    <Fragment>\n      <h2>Crear Cita</h2>\n\n      {error ? (\n        <p className=\"alerta-error\">Todos los campos son obligatorios</p>\n      ) : null}\n      <form onSubmit={submitCita}>\n        <label>Nombre Mascota</label>\n        <input\n          type=\"text\"\n          name=\"mascota\"\n          className=\"u-full-width\"\n          placeholder=\"Nombre Mascota\"\n          onChange={actualizarState}\n          value={mascota}\n        />\n        <label>Nombre Dueño</label>\n        <input\n          type=\"text\"\n          name=\"propietario\"\n          className=\"u-full-width\"\n          placeholder=\"Nombre del propietario\"\n          onChange={actualizarState}\n          value={propietario}\n        />\n        <label>Fecha</label>\n        <input\n          type=\"date\"\n          name=\"fecha\"\n          className=\"u-full-width\"\n          onChange={actualizarState}\n          value={fecha}\n        />\n        <label>Hora</label>\n        <input\n          type=\"time\"\n          name=\"hora\"\n          className=\"u-full-width\"\n          onChange={actualizarState}\n          value={hora}\n        />\n        <label>Sintomas</label>\n        <textarea\n          className=\"u-full-width\"\n          name=\"sintomas\"\n          onChange={actualizarState}\n          value={sintomas}\n        ></textarea>\n        <button type=\"submit\" className=\"u-full-width button-primary\">\n          Agregar Cita\n        </button>\n      </form>\n    </Fragment>\n  );\n};\n\nFormulario.propTypes = {\n  crearCita: PropTypes.func.isRequired,\n};\n\nexport default Formulario;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Cita = ({ cita, eliminarCita }) => {\n  return (\n    <div className=\"cita\">\n      <p>\n        Mascota: <span>{cita.mascota}</span>\n      </p>\n      <p>\n        Dueño: <span>{cita.propietario}</span>\n      </p>\n      <p>\n        Fecha: <span>{cita.fecha}</span>\n      </p>\n      <p>\n        Hora: <span>{cita.hora}</span>\n      </p>\n      <p>\n        Sintomas:: <span>{cita.sintomas}</span>\n      </p>\n\n      <button\n        className=\"button eliminar u-full-width\"\n        onClick={() => eliminarCita(cita.id)}\n      >\n        Eliminar &times;\n      </button>\n    </div>\n  );\n};\n\nCita.propTypes = {\n  cita: PropTypes.object.isRequired,\n  eliminarCita: PropTypes.func.isRequired,\n};\n\nexport default Cita;\n","import React, { Fragment, useState, useEffect } from 'react';\nimport Formulario from './components/Formulario';\nimport Cita from './components/Cita';\n\nfunction App() {\n  // citas en local storage\n  let citasIniciales = JSON.parse(localStorage.getItem('citas'));\n  if (!citasIniciales) {\n    citasIniciales = [];\n  }\n\n  // Arreglo de citas\n  const [citas, guardarCitas] = useState(citasIniciales);\n\n  // useEffect para realizar ciertas operaciones cuando el state cambia\n  useEffect(() => {\n    let citasIniciales = JSON.parse(localStorage.getItem('citas'));\n\n    if (citasIniciales) {\n      localStorage.setItem('citas', JSON.stringify(citas));\n    } else {\n      localStorage.setItem('citas', JSON.stringify([]));\n    }\n  }, [citas]);\n\n  // Función que tome las citas actuales y agregue la nueva\n\n  const crearCita = (cita) => {\n    guardarCitas([...citas, cita]);\n  };\n\n  // Funci´øn que elimina una cita por su id\n\n  const eliminarCita = (id) => {\n    const nuevasCitas = citas.filter((cita) => cita.id !== id);\n    guardarCitas(nuevasCitas);\n  };\n\n  // mensaje condicional\n  const titulo = citas.length === 0 ? 'No hay citas' : 'Administra tus citas';\n  return (\n    <Fragment>\n      <h1>Administrador de pacientes</h1>\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"one-half column\">\n            <Formulario crearCita={crearCita} />\n          </div>\n          <div className=\"one-half column\">\n            <h2>{titulo}</h2>\n            {citas.map((cita) => (\n              <Cita key={cita.id} cita={cita} eliminarCita={eliminarCita} />\n            ))}\n          </div>\n        </div>\n      </div>\n    </Fragment>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}